function _classCallCheck(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(t, e) {
    for (var s = 0; s < e.length; s++) {
        var i = e[s];
        (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
    }
}
function _createClass(t, e, s) {
    return e && _defineProperties(t.prototype, e), s && _defineProperties(t, s), t;
}
var Dolly = (function () {
    function i(t, e) {
        var s = this;
        _classCallCheck(this, i),
            (this.app = {
                touchClick: "ontouchstart" in window || (window.DocumentTouch && document instanceof DocumentTouch) ? "touchstart" : "click",
                addClass: function (t, e) {
                    if (Array.isArray(t)) for (var s = 0; s < t.length; s++) i(t[s], e);
                    else i(t, e);
                    function i(t, e) {
                        t.classList ? t.classList.add(e) : app.hasClass(t, e) || (t.className += " " + e);
                    }
                },
                removeClass: function (t, e) {
                    if (Array.isArray(t)) for (var s = 0; s < t.length; s++) i(t[s], e);
                    else i(t, e);
                    function i(t, e) {
                        var s;
                        t.classList ? t.classList.remove(e) : app.hasClass(t, e) && ((s = new RegExp("(\\s|^)" + e + "(\\s|$)")), (t.className = t.className.replace(s, " ")));
                    }
                },
                hasClass: function (t, e) {
                    return t.classList ? t.classList.contains(e) : !!t.className.match(new RegExp("(\\s|^)" + e + "(\\s|$)"));
                },
                getPercentage: function (t, e) {
                    return (e / 100) * t;
                },
            }),
            (this.math = {
                map: function (t, e, s, i, n) {
                    return ((t - e) * (n - i)) / (s - e) + i;
                },
                lerp: function (t, e, s) {
                    return (1 - s) * t + s * e;
                },
                inOutQuad: function (t) {
                    return (t *= 2) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1);
                },
            }),
            (this.obj = e || {}),
            (this.container = t),
            (this.nested = this.app.hasClass(this.container, "dolly-container-nested")),
            (this.wrapper = this.nested ? this.container.querySelector(".dolly-wrap-nested") : this.container.querySelector(".dolly-wrap")),
            (this.layers = this.nested ? this.wrapper.querySelectorAll(".dolly-layer-nested") : this.wrapper.querySelectorAll(".dolly-layer")),
            (this.navigation = document.querySelector(".dolly-navigation") ? document.querySelector(".dolly-navigation") : null),
            (this.anchors = this.navigation ? this.navigation.querySelectorAll(".dolly-anchor") : null),
            (this.duration = null != this.obj.duration ? this.obj.duration : 800),
            this.navigation && (this.activeMenu = null == this.obj.activeMenu || this.obj.activeMenu),
            (this.progress = 0),
            (this.direction = "in"),
            (this.prevIndex = 0),
            (this.index = 0),
            (this.limit = 0),
            (this.trigger = !1),
            (this.threshold = null != this.obj.threshold ? this.obj.threshold : 0),
            (this.bodyClass = null == this.obj.bodyClass || this.obj.bodyClass),
            (this.fullpage = null != this.obj.fullpage && this.obj.fullpage),
            (this.onlyAnchors = null != this.obj.onlyAnchors && this.obj.onlyAnchors),
            (this.lockScroll = !1),
            (this.oldScroll = new Date().getTime()),
            (this.delay = null != this.obj.delay ? this.obj.delay : 1500),
            (this.newScroll = 0),
            (this.progressStyles = {
                translation: {
                    previous: 0,
                    current: 0,
                    ease: this.obj.ease ? this.obj.ease : 0.1,
                    setValue: function () {
                        return s.progress;
                    },
                },
            }),
            (this.onScroll = this.obj.onScroll ? this.obj.onScroll : null),
            (this.onReady = this.obj.onReady ? this.obj.onReady : null),
            (this.onResize = this.obj.onResize ? this.obj.onResize : null),
            (this.onChange = this.obj.onChange ? this.obj.onChange : null),
            (this.scrollManager = this.scrollManager.bind(this)),
            (this.setDirection = this.setDirection.bind(this)),
            (this.touchStart = this.touchStart.bind(this)),
            (this.touchEnd = this.touchEnd.bind(this)),
            (this.resize = this.resize.bind(this)),
            (this.render = this.render.bind(this)),
            (this.anchorManager = this.anchorManager.bind(this)),
            (this.steps = []),
            (this.perspective = null != this.obj.perspective ? this.obj.perspective : 3e3),
            (this.distance = null != this.obj.distance ? this.obj.distance : 5e3),
            (this.limit = this.distance * (this.layers.length - 1)),
            0 != this.threshold && (this.threshold = this.app.getPercentage(this.distance, this.threshold)),
            this.setSize(),
            this.bodyClass && this.setBodyClass(),
            this.activeMenu && this.setActiveMenu(),
            this.startDolly(),
            console.log("Dolly - alpha v.01");
    }
    return (
        _createClass(i, [
            {
                key: "render",
                value: function () {
                    this.calcScroll(), this.setScroll();
                },
            },
            {
                key: "calcScroll",
                value: function () {
                    for (var t in this.progressStyles)
                        (this.progressStyles[t].current = this.progressStyles[t].setValue()), (this.progressStyles[t].previous = this.math.lerp(this.progressStyles[t].previous, this.progressStyles[t].current, this.progressStyles[t].ease));
                },
            },
            {
                key: "setSize",
                value: function () {
                    this.setContainerStyle(), this.setLayersStyle();
                },
            },
            {
                key: "setContainerStyle",
                value: function () {
                    (this.perspective = null != this.obj.perspective ? this.obj.perspective : 3e3),
                        (this.distance = null != this.obj.distance ? this.obj.distance : 5e3),
                        (this.limit = this.distance * (this.layers.length - 1)),
                        (this.container.style.perspective = this.perspective + "px");
                },
            },
            {
                key: "setLayersStyle",
                value: function () {
                    for (var t = 0; t < this.layers.length; t++) {
                        (this.layers[t].style.zIndex = 100 * (this.layers.length - t)), (this.layers[t].style.transform = "translate3d(0,0," + -this.distance * t + "px)");
                        var e = this.distance * t;
                        this.steps.push(e);
                    }
                    null != this.onReady && this.onReady(this);
                },
            },
            {
                key: "resize",
                value: function () {
                    (this.steps = []), this.container.removeAttribute("style"), (this.limit = 0), null != this.onResize && this.onResize(), this.setSize();
                },
            },
            {
                key: "setDirection",
                value: function (t) {
                    var e = 0;
                    "click" == this.app.touchClick
                        ? ((e = t.deltaY ? t.deltaY : 50 * Math.max(-1, Math.min(1, t.wheelDelta || t.detail))), (this.direction = e < 0 ? "out" : "in"))
                        : ((e = this.touchS - event.touches[0].pageY), this.touch && (this.direction = 0 < e ? "in" : "out")),
                        this.lockScroll || (this.fullpage ? this.fullpageScroll() : this.scrollManager(e), this.render());
                },
            },
            {
                key: "scrollManager",
                value: function (t) {
                    return (this.progress += t), parseInt(this.progress) < 0 ? (this.progress = 0) : parseInt(this.progress) > this.limit && (this.progress = this.limit), this.progress;
                },
            },
            {
                key: "fullpageScroll",
                value: function () {
                    (this.newScroll = new Date().getTime()),
                        this.oldScroll + this.delay < this.newScroll &&
                            ("in" == this.direction ? this.index < this.layers.length && this.moveToIndex(this.index + 1, this.duration) : 0 < this.index && this.moveToIndex(this.index - 1, this.duration),
                            (this.oldScroll = new Date().getTime()));
                },
            },
            {
                key: "touchStart",
                value: function () {
                    (this.touchS = event.touches[0].pageY), (this.touch = !0);
                },
            },
            {
                key: "touchEnd",
                value: function () {
                    this.touch = !1;
                },
            },
            {
                key: "setTrigger",
                value: function () {
                    (0 == Math.round(this.progressStyles.translation.previous) && "out" == this.direction) || (Math.round(this.progressStyles.translation.previous) == this.limit && "in" == this.direction)
                        ? (this.trigger = !0)
                        : (this.trigger = !1);
                },
            },
            {
                key: "setScroll",
                value: function () {
                    (this.wrapper.style.transform = "translate3d(0,0,".concat(this.progressStyles.translation.previous, "px)")), this.setTrigger(), this.setIndex();
                },
            },
            {
                key: "setIndex",
                value: function () {
                    for (var t = 0; t < this.steps.length; t++)
                        this.app.removeClass(this.layers[t], "active-layer"),
                            "in" == this.direction
                                ? Math.round(Math.abs(this.progressStyles.translation.previous)) >= this.steps[t] - this.threshold && (this.index = t)
                                : Math.round(Math.abs(this.progressStyles.translation.previous)) >= this.steps[t] && (this.index = t);
                    this.app.addClass(this.layers[this.index], "active-layer"),
                        this.bodyClass && this.setBodyClass(),
                        this.activeMenu && this.setActiveMenu(),
                        null != this.onScroll && this.onScroll(this.index, this.progressStyles.translation.previous, this.direction, this.trigger),
                        null != this.onChange && this.prevIndex != this.index && this.onChange(this.prevIndex, this.index, this.progressStyles.translation.previous),
                        (this.prevIndex = this.index);
                },
            },
            {
                key: "setBodyClass",
                value: function () {
                    this.app.addClass(document.body, this.layers[this.index].getAttribute("id") ? "on-" + this.layers[this.index].getAttribute("id") : "on-layer" + this.index),
                        0 < this.index && this.app.removeClass(document.body, this.layers[this.index].getAttribute("id") ? "on-" + this.layers[this.index - 1].getAttribute("id") : "on-layer" + (this.index - 1)),
                        this.index < this.layers.length - 1 && this.app.removeClass(document.body, this.layers[this.index].getAttribute("id") ? "on-" + this.layers[this.index + 1].getAttribute("id") : "on-layer" + (this.index + 1));
                },
            },
            {
                key: "anchorManager",
                value: function (t) {
                    for (var e = t.target.getAttribute("data-anchor"), s = 0; s < this.layers.length; s++) this.layers[s].getAttribute("id") == e && this.moveToIndex(s, this.duration);
                },
            },
            {
                key: "setActiveMenu",
                value: function () {
                    for (var t = this.layers[this.index].getAttribute("id"), e = 0; e < this.anchors.length; e++)
                        this.anchors[e].getAttribute("data-anchor") == t ? this.app.addClass(this.anchors[e], "active-anchor") : this.app.removeClass(this.anchors[e], "active-anchor");
                },
            },
            {
                key: "moveToIndex",
                value: function (t, e) {
                    this.index > t ? (this.direction = "out") : (this.direction = "in");
                    var r = e || 1e3,
                        o = this,
                        h = !1,
                        a = this.progressStyles.translation.previous,
                        l = this.steps[t],
                        c = null;
                    function u(t) {
                        (c = t), d(t);
                    }
                    function d(t) {
                        if (h) return (o.progress = o.progressStyles.translation.previous = l), o.setIndex(), cancelAnimationFrame(d), void cancelAnimationFrame(u);
                        r <= t - c && (h = !0);
                        var e = (t - c) / r,
                            s = o.math.inOutQuad(e),
                            i = a + (l - a) * s,
                            n = "translate3d(0,0," + i + "px)";
                        (o.wrapper.style.transform = n), null != o.onScroll && o.onScroll(o.index, i), requestAnimationFrame(d);
                    }
                    u(), requestAnimationFrame(u), (this.index = t);
                },
            },
            {
                key: "getIndex",
                value: function () {
                    return this.index;
                },
            },
            {
                key: "getScroll",
                value: function () {
                    return this.progressStyles.translation.previous;
                },
            },
            {
                key: "startDolly",
                value: function () {
                    if (
                        (this.onlyAnchors ||
                            ("click" == this.app.touchClick
                                ? (window.addEventListener("mousewheel", this.setDirection), window.addEventListener("DOMMouseScroll", this.setDirection))
                                : (window.addEventListener("touchstart", this.touchStart), window.addEventListener("touchend", this.touchEnd), window.addEventListener("touchmove", this.setDirection))),
                        this.navigation)
                    )
                        for (var t = 0; t < this.anchors.length; t++) this.anchors[t].addEventListener(this.app.touchClick, this.anchorManager);
                    window.addEventListener("resize", this.resize);
                },
            },
            {
                key: "stopDolly",
                value: function () {
                    if (
                        ("click" == this.app.touchClick
                            ? (window.removeEventListener("mousewheel", this.setDirection), window.removeEventListener("DOMMouseScroll", this.setDirection))
                            : (window.removeEventListener("touchstart", this.touchStart), window.removeEventListener("touchend", this.touchEnd), window.removeEventListener("touchmove", this.setDirection)),
                        this.navigation)
                    )
                        for (var t = 0; t < this.anchors.length; t++) this.anchors[t].removeEventListener(this.app.touchClick, this.anchorManager);
                    window.removeEventListener("resize", this.resize);
                },
            },
            {
                key: "blockScroll",
                value: function (t) {
                    this.lockScroll = t;
                },
            },
        ]),
        i
    );
})();
